package com.zed.base_demo.shiro;import com.zed.base_demo.interceptor.CustomRolesAuthorizationFilter;import org.apache.shiro.cache.MemoryConstrainedCacheManager;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.servlet.Filter;import java.util.LinkedHashMap;import java.util.Map;/** * Shiro配置 * * @author:Zed * @date: 2019/5/2 */@Configurationpublic class ShiroConfiguration {    @Bean("credentialMatcher")    public CredentialMatcher credentialMatcher() {        return new CredentialMatcher();    }    @Bean("authRealm")    public AuthRealm authRealm(@Qualifier("credentialMatcher") CredentialMatcher matcher) {        AuthRealm authRealm = new AuthRealm();        authRealm.setCredentialsMatcher(matcher);        // 设置缓存在内存中        authRealm.setCacheManager(new MemoryConstrainedCacheManager());        return authRealm;    }    @Bean("securityManager")    public DefaultWebSecurityManager securityManager(@Qualifier("authRealm") AuthRealm realm) {        DefaultWebSecurityManager manager = new DefaultWebSecurityManager();        manager.setRealm(realm);        return manager;    }    @Bean("shiroFilter")    public ShiroFilterFactoryBean shiroFilter(@Qualifier("securityManager") SecurityManager manager) {        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();        bean.setSecurityManager(manager);        // 登陆路径/login        bean.setLoginUrl("/login");        // 登陆成功路径/index        bean.setSuccessUrl("/index");        // 权限不足或认证失败路径/unauthorized        bean.setUnauthorizedUrl("/unauthorized");        LinkedHashMap<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();        // 需要经过身份认证才可以访问/index        filterChainDefinitionMap.put("/index", "authc");        // 可以匿名使用        filterChainDefinitionMap.put("/login", "anon");        filterChainDefinitionMap.put("/loginuser", "anon");        filterChainDefinitionMap.put("/druid/**", "anon");        // 登陆后的所有角色都可以访问/**        filterChainDefinitionMap.put("/**", "user");        // 只有admin角色才可以访问/admin        filterChainDefinitionMap.put("/admin", "roles[admin]");        // 只有拿到edit权限的用户才可以访问/edit        filterChainDefinitionMap.put("/edit", "perms[edit]");        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);        // 权限过滤 Filter        Map<String, Filter> filterMap = new LinkedHashMap<>(1);        filterMap.put("roles", rolesAuthorizationFilter());        bean.setFilters(filterMap);        return bean;    }    @Bean("authorizationAttributeSourceAdvisor")    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(            @Qualifier("securityManager") SecurityManager securityManager) {        AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();        advisor.setSecurityManager(securityManager);        return advisor;    }    /**     * 实现Spring的自动代理     *     * @return     */    @Bean("defaultAdvisorAutoProxyCreator")    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {        DefaultAdvisorAutoProxyCreator creator = new DefaultAdvisorAutoProxyCreator();        creator.setProxyTargetClass(true);        return creator;    }    @Bean    public CustomRolesAuthorizationFilter rolesAuthorizationFilter() {        return new CustomRolesAuthorizationFilter();    }}